{"version":3,"sources":["components/Logo/maleroom.png","components/Stamp/coming-soon.png","components/Logo/Logo.js","components/Stamp/Stamp.js","components/Icons/Instagram/Instagram.js","components/Icons/Facebook/Facebook.js","components/Icons/Twitter/Twitter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Logo","src","maleroom","alt","Stamp","stamp","Instagram","href","icon","faInstagram","size","Facebook","faFacebook","Twitter","faTwitter","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uGAAAA,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,uMCY5BC,EATF,WAET,OAEJ,yBAAKC,IAAKC,IAAUC,IAAI,c,gBCKTC,EATD,WAEV,OAEJ,yBAAKH,IAAKI,IAAOF,IAAI,W,cCMNG,G,MARG,WAClB,OACI,uBAAGC,KAAO,iBACd,kBAAC,IAAD,CAAiBC,KAAMC,IAAaC,KAAK,UCI1BC,EARE,WACjB,OACA,uBAAGJ,KAAK,gBACR,kBAAC,IAAD,CAAiBC,KAAMI,IAAYF,KAAK,SCMzBG,EARC,WAChB,OACI,uBAAGN,KAAK,eACZ,kBAAC,IAAD,CAAiBC,KAAMM,IAAWJ,KAAK,SCsBxBK,MArBf,WAEE,OAEE,yBAAKC,UAAU,OAEb,4BAAQA,UAAU,cAEhB,6BAAK,kBAAC,EAAD,OACL,2BACE,kBAAC,EAAD,QAGJ,yBAAKA,UAAU,aACb,kBAAC,EAAD,MAAY,kBAAC,EAAD,MAAW,kBAAC,EAAD,S,MCXXC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.25646006.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/maleroom.630b999d.png\";","module.exports = __webpack_public_path__ + \"static/media/coming-soon.4e722aec.png\";","import React from 'react';\nimport maleroom from './maleroom.png';\n\nconst Logo = () =>{\n   \n    return(\n\n<img src={maleroom} alt=\"maleroom\"></img>\n\n    )\n};\n\nexport default Logo;","import React from 'react';\nimport stamp from './coming-soon.png';\n\nconst Stamp = () =>{\n   \n    return(\n\n<img src={stamp} alt=\"stamp\"></img>\n\n    )\n};\n\nexport default Stamp;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faInstagram } from '@fortawesome/free-brands-svg-icons';\nimport \"./Instagram.css\";\n \nconst Instagram = () =>{\nreturn(\n    <a href = \"instagram.com\">\n<FontAwesomeIcon icon={faInstagram} size=\"6x\" />\n</a>\n    )\n}\n \nexport default Instagram;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFacebook } from '@fortawesome/free-brands-svg-icons';\n \nconst Facebook = () =>{\nreturn(\n<a href=\"facebook.com\">\n<FontAwesomeIcon icon={faFacebook} size=\"6x\" />\n</a>    \n    )\n}\n \nexport default Facebook;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons';\n \n\nconst Twitter = () =>{\nreturn(\n    <a href=\"twitter.com\">\n<FontAwesomeIcon icon={faTwitter} size=\"6x\" />\n</a>\n    )\n}\n \nexport default Twitter;\n","import React from 'react';\n\nimport './App.css';\nimport Logo from './components/Logo/Logo';\nimport Stamp from './components/Stamp/Stamp';\nimport Instagram from './components/Icons/Instagram/Instagram';\nimport Facebook from './components/Icons/Facebook/Facebook';\nimport Twitter from './components/Icons/Twitter/Twitter';\n\nfunction App() {\n\n  return (\n    \n    <div className=\"App\">\n      \n      <header className=\"App-header\">\n \n        <div><Stamp/></div>\n        <p>\n          <Logo/>\n        </p>   \n      </header>\n      <div className=\"container\">\n        <Instagram/><Facebook/><Twitter/>\n        </div>\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}